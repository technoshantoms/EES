import AggregateRoot from "context/Core/Domain/AggregateRoot";
import DepositRequest from "./DepositRequest";
import ExternalContract from "./ExternalContract";
import InternalContract from "context/Domain/InternalContract";
export declare const STATUS_CREATED = 1;
export declare const STATUS_SUBMITTED_TO_INTERNAL_BLOCKCHAIN = 5;
export declare const STATUS_CREATED_IN_INTERNAL_BLOCKCHAIN = 10;
export declare const STATUS_REDEEMED_IN_INTERNAL_BLOCKCHAIN = 15;
export declare const STATUS_REDEEM_EXECUTED_IN_EXTERNAL_BLOCKCHAIN = 20;
export declare const STATUS_COMPLETED = 25;
export declare const STATUS_BURNED = 100;
export declare const STATUS_REFUNDED = 105;
export declare const STATUS_REFUNDED_IN_EXTERNAL_BLOCKCHAIN = 110;
export default class Deposit extends AggregateRoot {
    _depositRequest: DepositRequest;
    _externalContract: ExternalContract;
    private _secret;
    private _status;
    _internalContract: InternalContract | null;
    private _externalBlockchainRedeemTxHash;
    private _internalBlockchainBurnTxHash;
    private _mintedAmount;
    private _burnedAmount;
    constructor(_depositRequest: DepositRequest, _externalContract: ExternalContract);
    get internalContract(): InternalContract | null;
    get status(): number;
    get secret(): string | null;
    get externalBlockchainRedeemTxHash(): string | null;
    get internalBlockchainBurnTxHash(): string | null;
    get mintedAmount(): string;
    get burnedAmount(): string;
    static create(depositRequest: DepositRequest, externalContract: ExternalContract): Deposit;
    submittedToInternalBlockchain(mintedAmount: string): void;
    createdInInternalBlockchain(internalContract: InternalContract): void;
    redeemedInInternalBlockchain(secret: string): void;
    redeemExecutedInExternalBlockchain(txHash: string): void;
    completed(): void;
    isSubmittedToInternalBlockchain(): boolean;
    burned(burnedAmount: string): void;
    refunded(txHash: string): void;
    resetToCreated(): void;
    refundedInExternalBlockchain(): void;
    isRefundedInExternalBlockchain(): boolean;
}

import AggregateRoot from "context/Core/Domain/AggregateRoot";
import WithdrawRequest from "./WithdrawRequest";
import ExternalContract from "./ExternalContract";
import InternalContract from "context/Domain/InternalContract";
export declare const STATUS_CREATED_IN_INTERNAL_BLOCKCHAIN = 5;
export declare const STATUS_READY_TO_PROCESS = 10;
export declare const STATUS_SEND_IN_REPLY = 15;
export declare const STATUS_READY_TO_SIGN = 20;
export declare const STATUS_REDEEM_EXECUTED_IN_EXTERNAL_BLOCKCHAIN = 25;
export declare const STATUS_REDEEMED = 30;
export declare const STATUS_PROCESSED = 35;
export declare const STATUS_REFUND = 100;
export declare const STATUS_REFUNDED = 105;
export declare const STATUS_FAILED_PROCESSING = 200;
export default class Withdraw extends AggregateRoot {
    withdrawRequest: WithdrawRequest;
    internalContract: InternalContract;
    htlcCreateOperationId: string;
    transferOperationId: string;
    secret: string | null;
    status: number;
    externalContract: ExternalContract | null;
    errorMessage: string | null;
    hashlock: string | null;
    timelock: number | null;
    amountOfHTLC: number | null;
    amountOfWithdrawalFee: number | null;
    assetOfWithdrawalFee: string | null;
    txHash: string | null;
    externalBlockchainRedeemTxHash: string | null;
    internalRedeemBlockNumber: number | null;
    externalBlockchainRefundTxHash: string | null;
    constructor(withdrawRequest: WithdrawRequest, internalContract: InternalContract, htlcCreateOperationId: string, transferOperationId: string);
    static create(withdrawRequest: WithdrawRequest, internalContract: InternalContract, htlcCreateOperationId: string, transferOperationId: string): Withdraw;
    error(message: string): void;
    readyToProcess(hashlock: string, timelock: number, amountOfHtlc: number, amountOfWithdrawalFee: number, assetOfWithdrawalFee: string): void;
    sentInReply(txHash: string): void;
    readyToSign(contract: ExternalContract): void;
    isReadyToSign(): boolean;
    redeem(externalBlockchainRedeemTxHash: string, preimage: string | undefined): void;
    redeemed(): void;
    setInternalRedeemBlockNumber(blockNumber: number): void;
    processed(): void;
    refund(txHash: string): void;
    refunded(): void;
}
